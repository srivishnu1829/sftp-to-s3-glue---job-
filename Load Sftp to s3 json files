nano sftp code
---------------------------
from __future__ import print_function
import os
import stat
import math
import json
import time
from datetime import date
import io
from io import BytesIO
from io import StringIO
import boto3
import botocore
import paramiko
import tarfile
from boto3.s3.transfer import TransferConfig

host = 'nano-sftp.ccncncncn.com'
port = 22
username = 'acasnsc'
password = '1243980824'

key_name = 'pemkey'

keyfile_path = 's3://aa.pem'
s3_client = boto3.client('s3')
# GB = 1024 ** 0
# config = TransferConfig(multipart_threshold=1*GB)

config = TransferConfig(multipart_threshold=1024 / 25, max_concurrency=10,multipart_chunksize=1024 / 25, use_threads=True)

today = date.today()
# dd/mm/YY
dateKey = today.strftime("%Y%m%d")
print("dateKey =", dateKey)
tarFileName="m-prod_"+dateKey+"_011001.tgz"
bucket_name = "-prod-"


key_content="""-----BEGIN RSA PRIVATE KEY-----
MIIEpAI
-----END RSA PRIVATE KEY-----"""

print(key_content)


def create_sftp_client(host, port, username, password, keyfilepath, keyfiletype, keyfileContent):
    print("Trying to connected to sftpclient")
    ssh = None
    sftp = None
    key = None
    try:
        if keyfilepath is not None:
            if keyfiletype == 'DSA':
                key = paramiko.DSSKey.from_private_key_file(keyfilepath)
            else:
                key = paramiko.RSAKey.from_private_key(io.StringIO(keyfileContent))
 
        # Connect SSH client accepting all host keys.
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, port, username, password, key)
        
        # Using the SSH client, create a SFTP client.
        sftp = ssh.open_sftp()
        # Keep a reference to the SSH client in the SFTP client as to prevent the former from
        # being garbage collected and the connection from being closed.
        sftp.sshclient = ssh
        print("##Successfully connected to sftpclient :-",sftp)
        return sftp
    except Exception as e:
        print('An error occurred creating SFTP client: %s: %s' % (e.__class__, e))
        if sftp is not None:
            sftp.close()
        if ssh is not None:
            ssh.close()
        pass
    
sftpclient=create_sftp_client(host, port, username, password, keyfile_path, 'RSA',key_content)
print("##::::::::::::::::::::::::::::::::::##")


def move_nanofile_s3(sftp):
    print("##Pull nano file from sftp process START##")
    files = sftp.listdir()
    print(files)
    sftp.chdir("prod")
    try:
        if sftp.listdir ==0:
            print("Empty directory")
        else:
            print("data directory present")
            print(sftp.listdir())
            ftp_file = sftp.file(tarFileName,'r')
            print("Read File and start saving to s3")
            s3_client.upload_fileobj(ftp_file, Bucket=bucket_name, Key=str(tarFileName),Config=config)
        #    s3_client.multipart_uploads(ftp_file, Bucket=bucket_name, Key=str(tarFileName))
            #s3_client.upload_file(ftp_file, Bucket=bucket_name, Key=str(tarFileName),Config=config)
            #response = client.create_multipart_upload(
    except Exception as e:
        print('Failed: '+ str(e))
    print("##Pull nano file from sftp process END##")
    sftp.close()

if sftpclient is not None:
    move_nanofile_s3(sftpclient)
print("##::::::::::::::::::::::::::::::::::##")
